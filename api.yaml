swagger: "2.0"
info:
  title: Votek
  description: API documentation.
  
  servers:
    -url: http://localhost:8080
    description: THis is my local Server 
schemes: [http]
paths:
  

  /user/signup:
    post:
      summary: Add user to databse
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            type: object 
            properties:
              password:
                type: integer
              fullName:
                type: string
              email:
                type: string 
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              msg:
                type: String
              fullName:
                type: string
              email:
                type: string 
              token:
                type: string 
        '401':
          description: OK
          schema:
            type: string
            example: "User already exists." 
          
  
  /auth/signin :
    post:
      summary: User logging in.
      produces:
        - application/json
      consumes:
        - application/json
      parameters: 
        - in: body
          name: body
          schema:
            type: object 
            properties:
              email:
                type: string 
              password:
                type: string  
      responses:
        '200':
          description: OK
          schema:
            type: string
            example: "Successfully logged in." 
             
        '401':
          description: OK
          schema:
            type: string
            example: "Please enter a valid password." 
        '404':
          description: OK
          schema:
            type: string
            example: "The account you mentioned does not exist. Please try with correct email address." 

  
  /firebase/create-poll :
    post:
      summary: "Create a new poll"
      description: "This API allows an admin to create a new poll with questions and options"
      parameters:
        - name: "pollName"
          in: "body"
          description: "Name of the poll"
          required: true
          schema:
            type: "string"
        - name: "questions"
          in: "body"
          description: "Array of questions with options"
          required: true
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                question:
                  type: "string"
                maxSelections:
                  type: "number"
                options:
                  type: "array"
                  items:
                    type: "string"
        - name: "pollStatus"
          in: "body"
          description: "Status of the poll (active or inactive)"
          required: true
          schema:
            type: "string"
        - name: "pollCreatedAt"
          in: "body"
          description: "Creation date of the poll"
          required: true
          schema:
            type: "string"
        - name: "pollEndsAt"
          in: "body"
          description: "End date of the poll"
          required: true
          schema:
            type: "string"
        - name: "Authorization"
          in: "header"
          description: "Bearer token for authentication"
          required: true
          type: "string"
      responses:
        201:
          description: "Poll created successfully"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
              pollData:
                type: "object"
                properties:
                  pollName:
                    type: "string"
                  pollId:
                    type: "string"
                  questions:
                    type: "object"
                  pollStatus:
                    type: "string"
                  adminId:
                    type: "string"
                  pollCreatedAt:
                    type: "string"
                  pollEndsAt:
                    type: "string"
                  pollUrl:
                    type: "string"
              url:
                type: "string"
        400:
          description: "Invalid request"
        401:
          description: "Unauthorized access"
        500:
          description: "Failed to create poll"

  firebase/vote:
    post:
      summary: "Record a vote in a poll"
      parameters:
        - name: "pollId"
          in: "query"
          description: "The ID of the poll in which the vote is being recorded"
          required: true
          type: "string"
        - name: "selectedAnswers"
          in: "query"
          description: "An array of selected answers, where each element contains questionId and optionId"
          required: true
          type: "array"
          items:
            type: "object"
            properties:
              questionId:
                type: "string"
              optionId:
                type: "string"
        - name: "userId"
          in: "query"
          description: "The ID of the user who is recording the vote"
          required: true
          type: "string"
      responses:
        "200":
          description: "Vote recorded successfully"
        "400":
          description: "User not found"
        "500":
          description: "Error recording vote"

    
  firebase/live-polls:
    get:
      summary: Get live polls for admin
      description: Returns an array of live polls for the admin with the given adminId.
      parameters:
        - name: adminId
          in: query
          description: The ID of the admin for which to retrieve live polls.
          required: true
          type: string
      responses:
        200:
          schema:
            type: "object"
            properties: 
              pollData:
                type: "object"
                properties:
                  pollName:
                    type: "string"
                  pollId:
                    type: "string"
                  questions:
                    type: "object"
                  pollStatus:
                    type: "string"
                  adminId:
                    type: "string"
                  pollCreatedAt:
                    type: "string"
                  pollEndsAt:
                    type: "string"
                  pollUrl:
                    type: "string" 
        400:
          description: Bad Request
        500:
          description: Internal Server Error

  /poll/save-poll :
    post:
      summary: "Save ended poll"
      description: "This API allows an admin to save a ended poll with questions and options"
      parameters:
        - name: "pollName"
          in: "body"
          description: "Name of the poll"
          required: true
          schema:
            type: "string"
        - name: "questions"
          in: "body"
          description: "Array of questions with options"
          required: true
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                question:
                  type: "string"
                maxSelections:
                  type: "number"
                options:
                  type: "array"
                  items:
                    type: "string"
        - name: "pollStatus"
          in: "body"
          description: "Status of the poll (active or inactive)"
          required: true
          schema:
            type: "string"
        - name: "pollCreatedAt"
          in: "body"
          description: "Creation date of the poll"
          required: true
          schema:
            type: "string"
        - name: "pollEndsAt"
          in: "body"
          description: "End date of the poll"
          required: true
          schema:
            type: "string"
        
      responses:
        201:
          description: "Poll saved successfully"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
              pollData:
                type: "object"
                properties:
                  pollName:
                    type: "string"
                  pollId:
                    type: "string"
                  questions:
                    type: "object"
                  pollStatus:
                    type: "string"
                  adminId:
                    type: "string"
                  pollCreatedAt:
                    type: "string"
                  pollEndsAt:
                    type: "string"
                  pollUrl:
                    type: "string"
              url:
                type: "string"
        400:
          description: "Invalid request"
        

  /user/user-details:
    get:
      summary: Get user details
      description: Returns user details
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Bearer token for authentication"
          required: true
          type: "string" 
      responses:
        200:
          schema:
            type: "object"
            properties: 
              userData:
                type: "object"
                properties:
                  email:
                    type: "string"
                  fullName:
                    type: "string"
                  password:
                    type: "string"
                  userRole:
                    type: "string"
                  pollsCreated:
                    type: array
                  templateCreated:
                    type: "array"
                  pollsAttended:
                    type: "array"
        400:
          description: Bad Request
        500:
          description: Internal Server Error


  /template/save-template :
    post:
      summary: "Save template into mongodb"
      description: "This API allows an admin to create a new template with questions and options"
      parameters:
        - name: "templateName"
          in: "body"
          description: "Name of the template"
          required: true
          schema:
            type: "string"
        - name: "questions"
          in: "body"
          description: "Array of questions with options"
          required: true
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                question:
                  type: "string"
                maxSelections:
                  type: "number"
                options:
                  type: "array"
                  items:
                    type: "string"
        - name: "Authorization"
          in: "header"
          description: "Bearer token for authentication"
          required: true
          type: "string"
      responses:
        201:
          description: "Template saved successfully"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
              pollData:
                type: "object"
                properties:
                  templateName:
                    type: "string"
                  templateId:
                    type: "string"
                  questions:
                    type: "object"
                  adminId:
                    type: "string"
                  
              url:
                type: "string"
        400:
          description: "Something went wrong, please try again"
        
         
  template/get-template/{templateId}:
    get:
      summary: Get saved template details for particular user by templateId.
      parameters:
        - name: templateId
          in: path
          description: ID of the template to retrieve
          required: true
          type: string
        - name: Authorization
          in: header
          description: Token obtained from logging in
          required: true
          type: string
      responses:
        '200':
          description: Template data retrieved successfully
          schema:
            $ref: '#/definitions/TemplateData'
        '401':
          description: Unauthorized access
        '404':
          description: Template not found
        '500':
          description: Internal server error
definitions:
  TemplateData:
    type: object
    properties:
      templateId:
        type: string
      templateName:
        type: string
      questions:
        type: array
        items:
          $ref: '#/definitions/Question'
  Question:
    type: object
    properties:
      questionId:
        type: string
      question:
        type: string
      type:
        type: string
      maxSelections:
        type: string
      options:
        type: array
       

